version: '3.3'

services:
    db-mongo:
        image: mongo
        restart: always
        container_name: mongo_db
        environment: 
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: root
        ports:
            - '27017:27017'
        volumes:
            - docker_data:/data/mongodb
        networks:   
            compose-networks:
                ipv4_address: 172.28.1.1
        deploy:
            resources:
                limits:
                    memory: 100M
                reservations:
                    memory: 20M

    db-nosqlclient:
        image: mongoclient/mongoclient
        restart: always
        container_name: mongoclient
        ports:
            - '27018:3000'
        depends_on:
            - db-mongo
        networks:   
            compose-networks:
                ipv4_address: 172.28.1.2
        deploy:
            resources:
                limits:
                    memory: 100M
                reservations:
                    memory: 20M
    
    db-postgres:
        image: 'postgres'
        restart: always
        container_name: postgres_db
        environment:
            POSTGRES_USER: 'root'
            POSTGRES_PASSWORD: 'root'
        ports:
            - '5432:5432'
        volumes:
            - docker_data:/data/postgres
        networks:
            compose-networks:
                ipv4_address: 172.28.1.3
        deploy:
            resources:
                limits:
                    memory: 512M
                reservations:
                    memory: 256M

    db-pgadmin:
        image: 'dpage/pgadmin4'
        restart: always
        container_name: pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: 'user@email.com'
            PGADMIN_DEFAULT_PASSWORD: 'user'
        ports:
            - '5433:80'
        volumes:
            - docker_data:/data/pgadmin
        depends_on:
            - db-postgres
        networks:
            compose-networks:
                ipv4_address: 172.28.1.4
        deploy:
            resources:
                limits:
                    memory: 512M
                reservations:
                    memory: 256M

    db-redis:
        image: 'redis'
        restart: always
        container_name: redis_db
        command: redis-server --requirepass root
        ports:
            - '6379:6379'
        volumes:
            - docker_data:/data/redis
        networks:
            compose-networks:
                ipv4_address: 172.28.1.5
        deploy:
            resources:
                limits:
                    memory: 512M
                reservations:
                    memory: 256M
                
    redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: rediscommander/redis-commander:latest
        restart: always
        volumes:
        - ./redisconnections.json:/redis-commander/config/local-production.json
        ports:
        - "6380:8081"
        networks:
            compose-networks:
                ipv4_address: 172.28.1.7
        deploy:
            resources:
                limits:
                    memory: 512M
                reservations:
                    memory: 256M

        deploy:
            resources:
                limits:
                    memory: 512M
                reservations:
                    memory: 256M

    # api-docs:
    #     image: 'polinux/mkdocs'
    #     container_name: api-docs
    #     environment: 
    #         ADD_MODULES: mkdocs-bootstrap mkdocs-gitbook mkdocs-bootstrap4
    #         LIVE_RELOAD_SUPPORT: 'true'
    #         FAST_MODE: 'true'
    #         DOCS_DIRECTORY: /my_docs
    #         GIT_REPO: https://github.com/welingtonfidelis/test-mkdoks.git
    #         GIT_BRANCH: master
    #         AUTO_UPDATE: 'true'
    #         UPDATE_INTERVAL: '1'
    #         DEV_ADDR: '0.0.0.0:9000'
    #     ports:
    #         - '9000:9000'
    #     volumes:
    #         - docker_data:/data/api-docs
    #     networks:
    #         compose-networks:
    #             ipv4_address: 172.28.1.7
    
    db:
        image: mysql:5.7
        restart: always
        environment:
          MYSQL_DATABASE: "mysql_docker"
          MYSQL_USER: "user"
          MYSQL_PASSWORD: "root"
          MYSQL_ROOT_PASSWORD: "root"
        ports:
          - "3306:3306"
        expose:
          - "3306"
        volumes:
          - my-db:/var/lib/mysql
    volumes:
      my-db:

networks: 
    compose-networks:
        ipam:
            driver: default
            config:
                - subnet: 172.28.0.0/16

volumes:
    docker_data:
        driver: local
